version: "3" # composeファイルバージョン指定

# 各種コンテナの定義
services:
  # webサービス: php:7.4-apache イメージから構築
  ## コンテナ名: training2_web
  web:
    # ./docker/web/Dockerfile をビルド
    build: ./docker/web/
    container_name: training2_web
    # ログ出力フォーマット: 基本的に json-file で良い
    logging:
      driver: json-file
    ports:
      - "80:80" # http://localhost:80 => service://web:80
    links:
      - db # dbサービス（training2_dbコンテナ）とリンク
           ## これにより tcp://db:3306 => service://db:3306 の接続が可能になる
    # Volumeマウント
    volumes:
      # ./html/ => service://web:/var/www/html/
      ## コンテナ側からデータ読み書きできるように rw モードでマウント
      - ./html/:/var/www/html/:rw

      # PHP設定ファイルをコンテナ内にマウント
      ## 基本的に設定ファイル系は read-only でマウントする
      - ./docker/web/php.ini:/usr/local/etc/php/php.ini:ro
  
  # dbサービス: mysql:5.7 イメージから構築
  ## コンテナ名: training2_db
  db:
    # mysql:5.7 イメージから構築
    image: mysql:5.7
    container_name: training2_db
    # ログ出力フォーマット: 基本的に json-file で良い
    logging:
      driver: json-file
    # 環境変数定義
    environment:
      # MySQL rootユーザパスワードを指定しないとMySQLのDockerコンテナは起動しない
      MYSQL_ROOT_PASSWORD: root
      # 初期作成データベース
      MYSQL_DATABASE: training2
    # Volumeマウント
    volumes:
      # ./db-data/ => service://db:/var/lib/mysql/
      ## コンテナ側からデータ読み書きできるように rw モードでマウント
      - ./db-data/:/var/lib/mysql/:rw

      # MySQL設定ファイルをコンテナ内にマウント
      ## World-writable エラーを防ぐため read-only にする
      - ./docker/db/my.cnf:/etc/mysql/conf.d/my.cnf:ro
